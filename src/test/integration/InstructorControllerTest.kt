import com.ktprj.KtApiApplication
import com.ktprj.dto.CourseDto
import com.ktprj.dto.InstructorDto
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.ActiveProfiles
import org.springframework.test.web.reactive.server.WebTestClient

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = arrayOf(KtApiApplication::class))
@ActiveProfiles("test")
@AutoConfigureWebTestClient
class InstructorControllerTest {

    @Autowired
    lateinit var webTestClient: WebTestClient

    @Test
    fun idIsNotARequiredFieldToCreateAnInstructor() {
        val reqBody: InstructorDto = InstructorDto(1, "joe")

        val exceptionResponse = webTestClient.post()
            .uri("/instructors/create")
            .bodyValue(reqBody)
            .exchange()
            .expectStatus().isBadRequest.expectBody(String::class.java)
            .returnResult().responseBody

        Assertions.assertEquals("Id is autogenerated, it is not a required field", exceptionResponse!!)

    }

    @Test
    fun shouldCreateANewCourse() {
        val reqBody: InstructorDto = InstructorDto(null, "joe")


        val createdInstructor = webTestClient.post()
            .uri("/instructors/create")
            .bodyValue(reqBody)
            .exchange()
            .expectStatus()
            .is2xxSuccessful.expectBody(InstructorDto::class.java).returnResult().responseBody

        Assertions.assertTrue(createdInstructor?.id != null)
    }

    @Test
    fun shouldPostAnewCourseWillFailWithInvalidValues() {

        val reqBody: InstructorDto = InstructorDto(null, "")

        val allErrors = webTestClient.post()
            .uri("/instructors/create")
            .bodyValue(reqBody)
            .exchange()
            .expectStatus().isBadRequest
            .expectBody(List::class.java).returnResult().responseBody


        Assertions.assertFalse(allErrors!!.isEmpty())
    }

}